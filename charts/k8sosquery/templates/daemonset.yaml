# Create Uptycs Osquery daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.daemonset.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: uptycs-osquery
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/component: endpoint
    app.kubernetes.io/part-of: Uptycs
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: uptycs-osquery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: uptycs-osquery
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/component: endpoint
        app.kubernetes.io/part-of: Uptycs
    spec:
      serviceAccountName: uptycs-osquery
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      {{- if .Capabilities.APIVersions.Has "config.openshift.io/v1" }}
      - key: node-role.kubernetes.io/infra
        effect: NoSchedule
      {{- end }}
      # nodeSelector:
      #   node-role.kubernetes.io/worker: ''
      # If this daemonset should be restricted to a set of nodes, use node selector to specify the node label(s)
      # nodeSelector:
      #  app: uptycs-osquery
      hostPID: {{ .Values.daemonset.hostPID }}
      hostIPC: {{ .Values.daemonset.hostIPC }}
      hostNetwork: {{ .Values.daemonset.hostNetwork }}
      terminationGracePeriodSeconds: {{ .Values.daemonset.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Values.daemonset.containers.name }}
        image: {{ .Values.daemonset.containers.image_name }}
        imagePullPolicy: {{ .Values.daemonset.containers.pullPolicy }}
        {{- if .Values.daemonset.containers.livenessProbe }}
        livenessProbe:
          exec:
            command:
            {{- range $k, $v := .Values.daemonset.containers.livenessProbe.exec.command }}
            - {{ $v }}
            {{- end }}
          initialDelaySeconds: {{ .Values.daemonset.containers.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.daemonset.containers.livenessProbe.periodSeconds }}
        {{- end }}
        securityContext:
          privileged: true
        env:
        {{- range $k, $v := .Values.daemonset.containers.env }}
        - name: {{ $v.name }}
          value: {{ $v.value }}
        {{- end}}
        resources:
          limits:
            cpu: {{ .Values.daemonset.containers.resources.limits.cpu }}
            memory: {{ .Values.daemonset.containers.resources.limits.memory }}
          requests:
            cpu: {{ .Values.daemonset.containers.resources.requests.cpu }}
            memory: {{ .Values.daemonset.containers.resources.requests.memory }}
        volumeMounts: 
        {{- range $k, $v := .Values.daemonset.containers.volumeMounts }}
        - name: {{ $v.name }}
        {{- if hasKey $v "mountPath" }}
          mountPath: {{ $v.mountPath }}
        {{- end }}
        {{- if hasKey $v "readOnly" }}
          readOnly: {{ $v.readOnly }}
        {{- end}}
        {{- if hasKey $v "mountPropagation" }}
          mountPropagation: {{ $v.mountPropagation }}
        {{- end }}
        {{- end }}
      volumes: 
      {{- range $k, $v := .Values.daemonset.volumes }}
      - name: {{ $v.name }}
      {{- if hasKey $v "hostPath" }}
        hostPath:
          path: {{ $v.hostPath.path }}
      {{- end }}
      {{- if hasKey $v "secret" }}
        secret:
          secretName: {{ $v.secret.secretName }}
          {{- if  hasKey $v.secret "optional"}}
          optional: {{ $v.secret.optional }}
          {{- end }}
      {{- end }}
      {{- end }}
      - name: config
        configMap:
          name: {{ .Values.configmap.name }}
