# Create Uptycs Osquery daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.daemonset.name }}
  {{- include "k8sosquery.namespace" . }}
  labels:
    app.kubernetes.io/name: uptycs-osquery
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/component: endpoint
    app.kubernetes.io/part-of: Uptycs
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: uptycs-osquery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: uptycs-osquery
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/component: endpoint
        app.kubernetes.io/part-of: Uptycs
    spec:
      serviceAccountName: uptycs-osquery
      {{- with .Values.daemonset.tolerations }}
      tolerations:
      {{- toYaml . | nindent 6 }}
      {{- if $.Capabilities.APIVersions.Has "config.openshift.io/v1" }}
      - key: node-role.kubernetes.io/infra
        effect: NoSchedule
      {{- end }}
      {{- end }}
      # nodeSelector:
      #   node-role.kubernetes.io/worker: ''
      # If this daemonset should be restricted to a set of nodes, use node selector to specify the node label(s)
      # nodeSelector:
      #  app: uptycs-osquery
      hostPID: true
      hostIPC: true
      hostNetwork: true
      {{- if .Values.daemonset.dnsPolicy }}
      dnsPolicy: {{ .Values.daemonset.dnsPolicy }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      containers:
      - name: {{ .Values.daemonset.containers.name }}
        image: {{ .Values.daemonset.containers.image_name }}
        imagePullPolicy: {{ .Values.daemonset.containers.pullPolicy }}
        {{- if .Values.daemonset.containers.livenessProbe }}
        livenessProbe:
          exec:
            command:
            {{- range $k, $v := .Values.daemonset.containers.livenessProbe.exec.command }}
            - {{ $v }}
            {{- end }}
          initialDelaySeconds: {{ .Values.daemonset.containers.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.daemonset.containers.livenessProbe.periodSeconds }}
        {{- end }}
        {{- if eq .Values.daemonset.dnsPolicy "ClusterFirstWithHostNet" }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "mount --bind /etc/resolv.conf /host/etc/resolv.conf"]
        {{- end }}
        securityContext:
          privileged: true
        env:
        {{- range $k, $v := .Values.daemonset.containers.env }}
        - name: {{ $v.name }}
          value: {{ $v.value }}
        {{- end}}
        resources:
          limits:
            cpu: {{ .Values.daemonset.containers.resources.limits.cpu }}
            memory: {{ .Values.daemonset.containers.resources.limits.memory }}
          requests:
            cpu: {{ .Values.daemonset.containers.resources.requests.cpu }}
            memory: {{ .Values.daemonset.containers.resources.requests.memory }}
        volumeMounts: 
        {{- range $k, $v := .Values.daemonset.containers.volumeMounts }}
        - name: {{ $v.name }}
        {{- if hasKey $v "mountPath" }}
          mountPath: {{ $v.mountPath }}
        {{- end }}
        {{- if hasKey $v "readOnly" }}
          readOnly: {{ $v.readOnly }}
        {{- end}}
        {{- if hasKey $v "mountPropagation" }}
          mountPropagation: {{ $v.mountPropagation }}
        {{- end }}
        {{- end }}
        {{- $osqueryVersion := include "k8sosquery.version" . }}
        # Beginning K8sosquery version 5.12.2.7 the nginx cert path has been updated so the below statement checks for that 
        {{- if ge (atoi $osqueryVersion) 51227 }}
        - mountPath: /etc/osquery/cert
        {{- else }}
        - mountPath: /etc/osquery
        {{- end }}
          name: nginxsecret
          readOnly: true
      volumes: 
      {{- range $k, $v := .Values.daemonset.volumes }}
      - name: {{ $v.name }}
      {{- if hasKey $v "hostPath" }}
        hostPath:
          path: {{ $v.hostPath.path }}
      {{- end }}
      {{- if hasKey $v "secret" }}
        secret:
          secretName: {{ $v.secret.secretName }}
          {{- if  hasKey $v.secret "optional"}}
          optional: {{ $v.secret.optional }}
          {{- end }}
      {{- end }}
      {{- end }}
      - name: config
        configMap:
          name: {{ .Values.configmap.name }}
