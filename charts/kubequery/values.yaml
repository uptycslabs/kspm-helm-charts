# Default values file for Uptycs Kubequery.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Kubernetes resources used by Kubequery are scoped to kubequery namespace.
namespace: kubequery

# Incase of RedHat OpenShift clusters, Kubernetes resources used by Kubequery are scoped to uptycs-kubequery namespace.
openshift:
  namespace:
    name: uptycs-kubequery

# Kubequery runs as a deployment meaning only one pod in a Kubernetes cluster.
deployment:
  spec:
    containers:
      image_name: uptycs/uptycs-kubequery:_UPTYCS_IMAGE_VERSION_
      pullPolicy: IfNotPresent
      # To enable Liveness Probe for Kubequery please follow the instructions from the following url:
      # https://{DOMAIN}{DOMAIN_SUFFIX}/help/docs/knowledge-base/configuration/liveness-probe-k8sosquey-kubequery
      resources:
        limits:
          cpu: 1000m
          memory: 1000Mi
        requests:
          cpu: 200m
          memory: 500Mi
    # This field defines the cluster name that shows up in Uptycs UI.
    hostname: _UPTYCS_CLUSTER_NAME_
    hostNetwork: false
    nodeSelector:
      kubernetes.io/os: linux
    #OPTIONAL: ImagePullSecrets to add to the kubequery-sa(Kubequery ServiceAccount) can be specified here.
    imagePullSecrets:
    # Tolerations for Kubequery pod can be defined here in this section.
    # Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes.
    # For more info please refer to K8s docs: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    tolerations:
    # Example toleration for Kubequery:
    # - key: install-kubequery
    #   operator: Equal
    #   value: "true"
    #   effect: NoSchedule

# Uptycs cloud service onto which the cluster is enrolled.
uptycsCloud: _UPTYCS_CLOUD_

# Agentless flag controls if agentless mode is enabled.
isAgentless: _IS_AGENTLESS_

# Uptycs protect flag controls if remediation & blocking features are enabled.
uptycsProtectDisabled: _UPTYCS_PROTECT_DISABLED_

# Disable kubernetes api calls for some tables potentially consuming lots of resources.
disableTables:
- kubernetes_crds

# Uptycs protect needs to be enabled to enable admission controllers.
# Both image admission controller & gatekeeper admission controller are disabled by default.
# Enable gatekeeper controller psp flag to install default PSPs.
# In order to use runtime image security policy please ensure that image admission controller is enabled.
# If image admission controller is enabled & no image security policy is specified we will use "uptycs_default_image_security_policy".
admissionControllerParameters:
  disable_image_admission_controller: true
  image_security_policy: _UPTYCS_IMAGE_SECURITY_POLICY_
  disable_gatekeeper_controller: true
  disable_gatekeeper_controller_psp: true
  gatekeeper_audit_interval: _UPTYCS_PROTECT_AUDIT_INTERVAL_

# Use these options to enable real-time detections on Kubernetes audit logs.
# If you enable detections on audit logs please make sure to fill in the required fields for that specific cloud-provider.
auditLogDetections:
  aks:
    disable_audit: true
    aks_conn_string:
    aks_eventhub_ns:
    aks_eventhub_name:
    aks_eventhub_keyname:
    aks_eventhub_secret: __AKS_EVENTHUB_SECRET__
  eks:
    disable_audit: true
    eks_log_group:
    eks_log_stream:
    eks_log_region:
  gke:
    disable_audit: true
    gke_project_id:
    gke_cluster_name:
    gke_poll_interval:
    gke_secret: __GKE_SECRET__
  unmanaged_cluster:
    disable_audit: true

# Webhook CA certs bundle.
webhook:
  caBundle: _CA_BUNDLE_

# Webhook Server TLS secret is used by Kubequery admission controllers to setup the HTTPS endpoints.
# These endpoints are then called by K8s API server during resource admission.
# This secret contains TLS cert & key for admission controller webhooks.
webhookServerTLS:
  crt: __UPTYCS_WEBHOOK_SERVER_TLS_CRT__
  key: __UPTYCS_WEBHOOK_SERVER_TLS_KEY__

# Uptycs enroll secret & nginx certs are stack specific & are required to communitcate with Uptycs cloud service.
# Enroll secret contains customer identifiers & should match with allowed Uptycs infra config.
# Nginx secret contains all the root CA's accepted by Uptycs cloud.
secrets:
  enroll_secret: __UPTYCS_ENROLL_SECRET__
  nginx_secret: |-
    __UPTYCS_NGINX_CRT__
